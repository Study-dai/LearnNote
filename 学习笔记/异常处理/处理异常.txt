处理异常
1、背景
初识异常
我们曾经的代码中已经接触了一些 “异常” 了. 例如:
除以 0

System.out.println(10 / 0);
// 执行结果
 Exception in thread "main" java.lang.ArithmeticException: / by zero

数组下标越界

int[] arr = {1, 2, 3}; 
System.out.println(arr[100]);
// 执行结果
 Exception in thread "main" java.lang.ArrayIndexOutOfBoundsException: 100

访问 null 对象

public class Test {
    public int num = 10;
    public static void main(String[] args) {
    Test t = null;
     System.out.println(t.num);
 	} 
}
// 执行结果
 Exception in thread "main" java.lang.NullPointerException 
 
所谓异常指的就是程序在 运行时 出现错误时通知调用者的一种机制.
有些错误是这样的, 例如将 System.out.println 拼写错了, 写成了 system.out.println. 此时编译过程中就会出 错, 这是 “编译期” 出错. 而运行时指的是程序已经编译通过得到 class 文件了, 再由 JVM 执行过程中出现的错误.
异常的种类有很多, 不同种类的异常具有不同的含义, 也有不同的处理方式。
防御式编程

错误在代码中是客观存在的. 因此我们要让程序出现问题的时候及时通知程序猿. 我们有两种主要的方式
LBYL: Look Before You Leap. 在操作之前就做充分的检查.
EAFP: It’s Easier to Ask Forgiveness than Permission. “事后获取原谅比事前获取许可更容易”. 也就是先操作, 遇到 问题再处理.
异常的核心思想就是 EAFP.

异常的好处
例如, 我们用伪代码演示一下开始一局王者荣耀的过程.
LBYL 风格的代码(不使用异常)

boolean ret = false; ret = 登陆游戏();
if (!ret) {
处理登陆游戏错误; return;
}
ret = 开始匹配(); if (!ret) {
处理匹配错误;
return;
}
ret = 游戏确认(); if (!ret) {
处理游戏确认错误;
return;
}
boolean ret = false; ret = 登陆游戏();
if (!ret) {
处理登陆游戏错误; return;
}
ret = 开始匹配(); if (!ret) {
处理匹配错误;
return;
}
ret = 游戏确认(); if (!ret) {
处理游戏确认错误;
return;
}

EAFP 风格的代码(使用异常）

try {
登陆游戏();
开始匹配();
游戏确认();
选择英雄();
载入游戏画面();
...
} catch (登陆游戏异常) {
处理登陆游戏异常;
} catch (开始匹配异常) {
处理开始匹配异常;
} catch (游戏确认异常) {
处理游戏确认异常;
} catch (选择英雄异常) {
处理选择英雄异常;
} catch (载入游戏画面异常) {
处理载入游戏画面异常;
}
......

对比两种不同风格的代码, 我们可以发现, 使用第一种方式, 正常流程和错误处理流程代码混在一起, 代码整体显的比较 混乱. 而第二种方式正常流程和错误流程是分离开的, 更容易理解代码.

异常的基本用法
捕获异常

try{
有可能出现异常的语句 ;
}[catch (异常类型  异常对象) {
} ... ]
[finally {
异常的出口
}]

1、try 代码块中放的是可能出现异常的代码.
2、catch 代码块中放的是出现异常后的处理行为.
3、?nally 代码块中的代码用于处理善后工作, 会在最后执行.
4、其中 catch 和 ?nally 都可以根据情况选择加或者不加.

加粗样式代码示例1 不处理异常

int[] arr = {1, 2, 3};
 System.out.println("before");
  System.out.println(arr[100]);
   System.out.println("after");
// 执行结果
before
Exception in thread "main" java.lang.ArrayIndexOutOfBoundsException: 100

我们发现一旦出现异常, 程序就终止了. after 没有正确输出.

代码示例2 使用 try catch 后的程序执行过程

int[] arr = {1, 2, 3};

try {
System.out.println("before");
 System.out.println(arr[100]);
  System.out.println("after");
} catch (ArrayIndexOutOfBoundsException e) {
// 打印出现异常的调用栈
e.printStackTrace();
}
System.out.println("after try catch");

// 执行结果
before java.lang.ArrayIndexOutOfBoundsException:  100
at demo02.Test.main(Test.java:10) 
after try catch

我们发现, 一旦 try 中出现异常, 那么 try 代码块中的程序就不会继续执行, 而是交给 catch 中的代码来执行. catch 执 行完毕会继续往下执行.
关于异常的处理方式
异常的种类有很多, 我们要根据不同的业务场景来决定. 对于比较严重的问题(例如和算钱相关的场景), 应该让程序直接崩溃, 防止造成更严重的后果 对于不太严重的问题(大多数场景), 可以记录错误日志, 并通过监控报警程序及时通知程序猿 对于可能会恢复的问题(和网络相关的场景), 可以尝试进行重试.

在我们当前的代码中采取的是经过简化的第二种方式. 我们记录的错误日志是出现异常的方法调用信息, 能很快 速的让我们找到出现异常的位置. 以后在实际工作中我们会采取更完备的方式来记录异常信息.

关于 "调用栈"
方法之间是存在相互调用关系的, 这种调用关系我们可以用 “调用栈” 来描述. 在 JVM 中有一块内存空间称为 “虚 拟机栈” 专门存储方法之间的调用关系. 当代码中出现异常的时候, 我们就可以使用 **e.printStackTrace(); **的 方式查看出现异常代码的调用栈.

代码示例3 catch 只能处理对应种类的异常

让代码抛出的是空指针异常.

int[] arr = {1, 2, 3};

try {
System.out.println("before"); arr = null; System.out.println(arr[100]); System.out.println("after");
} catch (ArrayIndexOutOfBoundsException e) { e.printStackTrace();
}
System.out.println("after try catch");

// 执行结果
before
Exception in thread "main" java.lang.NullPointerException at demo02.Test.main(Test.java:11)

此时, catch 语句不能捕获到刚才的空指针异常. 因为异常类型不匹配.
因为错误是空指针异常，处理的是数组下标越界

代码示例4 catch 可以有多个

int[] arr = {1, 2, 3};

try {
System.out.println("before");
 arr = null; 
 System.out.println(arr[100]);
  System.out.println("after");
} catch (ArrayIndexOutOfBoundsException e) {
System.out.println("这是个数组下标越界异常");
e.printStackTrace();
} catch (NullPointerException e) { 
System.out.println("这是个空指针异常"); 
e.printStackTrace();
}
System.out.println("after try catch");

// 执行结果 before 这是个空指针异常
java.lang.NullPointerException
at demo02.Test.main(Test.java:12) after try catch

一段代码可能会抛出多种不同的异常, 不同的异常有不同的处理方式. 因此可以搭配多个 catch 代码块.
如果多个异常的处理方式是完全相同, 也可以写成这样

 int[] arr = {1, 2, 3};
        try {
            System.out.println("before");
            arr = null;
            System.out.println(arr[100]);
            System.out.println("after");
        } catch (ArrayIndexOutOfBoundsException | NullPointerException e) {
            System.out.println("这是个数组下标越界异常和空指针异常");
            e.printStackTrace();
        }
        System.out.println("after try catch");

        //执行结果：
        before
        java.lang.NullPointerException
        at packageExpection.Test.main(Test.java:54)
        这是个数组下标越界异常和空指针异常
        after try catch

由于 Exception 类是所有异常类的父类. 因此可以用这个类型表示捕捉所有异常.
备注: catch 进行类型匹配的时候, 不光会匹配相同类型的异常对象, 也会捕捉目标异常类型的子类对象.
如刚才的代码, NullPointerException 和 ArrayIndexOutOfBoundsException 都是 Exception 的子类, 因此都 能被捕获到.

代码示例6 ?nally 表示最后的善后工作, 例如释放资源

int[] arr = {1, 2, 3};

try {
System.out.println("before"); arr = null; System.out.println(arr[100]); System.out.println("after");
} catch (Exception e) { e.printStackTrace();
} finally {
System.out.println("finally code");
}

// 执行结果
before java.lang.NullPointerException
at demo02.Test.main(Test.java:12) 

无论是否存在异常，finally中的代码都会被执行到，保证最终一定会执行到Scanner的code方法

代码示例7 使用 try 负责回收资源
刚才的代码可以有一种等价写法, 将 Scanner 对象在 try 的 ( ) 中创建, 就能保证在 try 执行完毕后自动调用 Scanner的 close 方法.

try (Scanner sc = new Scanner(System.in)) {
 int num = sc.nextInt();
  System.out.println("num = " + num);
} catch (Exception e) { 
e.printStackTrace();
}
 Scanner sc = new Scanner(System.in);
        //，光标方法try上面，使用 Alt+回车键，
        // 选择 Replace with 'try'with resources 自动改变成上面的代码
        try {
            int num = sc.nextInt();
            System.out.println("num=" + num);
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            System.out.println("finally code");
            sc.close();
        }

代码示例8 如果本方法中没有合适的处理异常的方式, 就会沿着调用栈向上传递

public static void main(String[] args) { 
try {
func();
} catch (ArrayIndexOutOfBoundsException e) 
{ e.printStackTrace();
}
System.out.println("after try catch");
}

public static void func() {
 int[] arr = {1, 2, 3};
System.out.println(arr[100]);
}
// 执行结果
java.lang.ArrayIndexOutOfBoundsException: 100 at demo02.Test.func(Test.java:18)
at demo02.Test.main(Test.java:9) after 

代码示例9 如果向上一直传递都没有合适的方法处理异常, 最终就会交给 JVM 处理, 程序就会异常终止(和我们最开始 未使用 try catch 时是一样的).

public static void main(String[] args) {
func();
System.out.println("after try catch");
}

public static void func() {
 int[] arr = {1, 2, 3};
System.out.println(arr[100]);
}

// 执行结果
Exception in thread "main" java.lang.ArrayIndexOutOfBoundsException: 100 at demo02.Test.func(Test.java:14)
at demo02.Test.main(Test.java:8)

可以看到, 程序已经异常终止了, 没有执行到 System.out.println(“after try catch”);这一行.


