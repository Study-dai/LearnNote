异常处理流程
1、程序先执行 try 中的代码
2、如果 try 中的代码出现异常, 就会结束 try 中的代码, 看和 catch 中的异常类型是否匹配.

3、如果找到匹配的异常类型, 就会执行 catch 中的代码

4、如果没有找到匹配的异常类型, 就会将异常向上传递到上层调用者. 无论是否找到匹配的异常类型, ?nally 中的代码都会被执行到(在该方法结束之前执行). 如果上层调用者也没有处理的了异常, 就继续向上传递.

5、一直到 main 方法也没有合适的代码处理异常, 就会交给 JVM 来进行处理, 此时程序就会异常终止.

抛出异常
除了 Java 内置的类会抛出一些异常之外, 程序猿也可以手动抛出某个异常. 使用 throw 关键字完成这个操作.

 public static void main(String[] args) {
            System.out.println(divide(10,0));
        }
        public static int divide(int x,int y){
            if(y==0) {
                throw new ArithmeticException("抛出0异常");
            }
            return x/y;
        }
        //执行结果：
        Exception in thread "main" java.lang.ArithmeticException: 抛出0异常
        at packageExpection.Test.divide(Test.java:147)
        at packageExpection.Test.main(Test.java:143)

关于 ?nally 的注意事项
?nally 中的代码保证一定会执行到. 这也会带来一些麻烦.

 public static void main(String[] args) {
        System.out.println(func());
    }
    public static int func(){
        try{
            return 10;
        }finally{
            return 20;
        }
    }
    //执行结果：20

注意:
?nally 执行的时机是在方法返回之前(try 或者 catch 中如果有 return 会在这个 return 之前执行 ?nally).

但是如果?nally 中也存在 return 语句, 那么就会执行 ?nally 中的 return, 从而不会执行到 try 中原有的 return.

一般我们不建议在 ?nally 中写 return (被编译器当做是一个警告).

