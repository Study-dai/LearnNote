包装类基础
Object 引用可以指向任意类型的对象，但有例外出现了，8 种基本数据类型不是对象，那岂不是刚才的泛型机制要失效了？
实际上也确实如此，为了解决这个问题，java 引入了一类特殊的类，即这 8 种基本数据类型的包装类，在使用过程 中，会将类似 int 这样的值包装到一个对象中去。
基本数据类型 包装类
byte Byte
short Short
int Integer
long Long
float Float
double Double
char Character
boolean Boolean
基本就是类型的首字母大写，除了Integer和Character

包装类的使用，装箱（boxing）和拆箱（unboxing）

 int i=10;
    //装箱操作，新建一个Integer类型对象，将i的值放入对象的某个属性中
    Integer  ii=Integer.valueOf(i);
    Integer ij=new Integer(i);
    
    //拆箱操作，将Integer对象中的值取出，放到一个基本数据类型中
    int j=ii.intValue();

自动装箱（autboxing）和自动拆箱（autounboxing）
可以看到在使用过程中，装箱可拆箱带来不少代码量，所以为了减少开发者负担，java提供自动机制。


int i = 10; 
Integer ii = i;    // 自动装箱 
Integer ij = (Integer)i; // 自动装箱 
 
int j = ii;     // 自动拆箱
 int k = (int)ii;   // 自动拆箱 

注意：自动装箱和自动拆箱是工作在编译期间的一种机制。

javap反编译工具
javap -c类名称

Compiled from "Main.java" 
public class Main {
   public Main(); 
       Code:
               0: aload_0        1: invokespecial #1                  // Method java/lang/Object."<init>":()V       
               4: return 
 
  public static void main(java.lang.String[]);
       Code:
              0: bipush        10
              2: istore_1
              3: iload_1
              4: invokestatic  #2                  // Method java/lang/Integer.valueOf:
              (I)Ljava/lang/Integer; 
               7: astore_2  
               8: iload_1 
               9: invokestatic  #2                 // Method java/lang/Integer.valueOf: 
              (I)Ljava/lang/Integer;  
               12: astore_3  
               13: aload_2 
               14: invokevirtual #3                // Method java/lang/Integer.intValue:()I
               17: istore        4      
               19: aload_2       
               20: invokevirtual #3                // Method java/lang/Integer.intValue:()I
               23: istore        5
                25: return
              } 

list的使用
常见方法

练习1

package package1112;
import java.util.List;
import java.util.ArrayList;
import java.util.LinkedList;


public class ListDemo {
    public static void main(String[] args) {
        List<String> courses = new ArrayList<>();
        courses.add("C 语言");
        courses.add("Java SE");
        courses.add("Java Web");
        courses.add("Java EE");

        // 和数组一样，允许添加重复元素
        courses.add("C 语言");

        // 按照添加顺序打印
        System.out.println(courses);

        // 类似数组下标的方式访问
        System.out.println(courses.get(0));
        System.out.println(courses);
        courses.set(0, "计算机基础");
        System.out.println(courses);

        // 截取部分 [1, 3)
        List<String> subCourses = courses.subList(1, 3);
        System.out.println(subCourses);

        // 重新构造
        List<String> courses2 = new ArrayList<>(courses);
        System.out.println(courses2);

        List<String> courses3 = new LinkedList<>(courses);
        System.out.println(courses3);

        // 引用的转换
        ArrayList<String> courses4 = (ArrayList<String>) courses2;
        System.out.println(courses4);
        //LinkedList<String> c = (LinkedList<String>)course2; 错误的类型
        LinkedList<String> courses5 = (LinkedList<String>)courses3;
        System.out.println(courses5);
        //ArrayList<String> c = (ArrayList<String>)course3; 错误的类型
    }
}
//执行结果：
/*      [C 语言, Java SE, Java Web, Java EE, C 语言]
        C 语言
        [C 语言, Java SE, Java Web, Java EE, C 语言]
        [计算机基础, Java SE, Java Web, Java EE, C 语言]
        [Java SE, Java Web]
        [计算机基础, Java SE, Java Web, Java EE, C 语言]
        [计算机基础, Java SE, Java Web, Java EE, C 语言]
        [计算机基础, Java SE, Java Web, Java EE, C 语言]
        [计算机基础, Java SE, Java Web, Java EE, C 语言]
        */

练习扑克牌

package package1112;
import java.util.List;
import java.util.ArrayList;
import java.util.Random;
class Card {
    public int rank;
    public String suit;

    public Card(int rank, String suit) {
        this.rank = rank;
        this.suit = suit;
    }

    @Override
    public String toString() {
        return "Card{" +
                "rank=" + rank +
                ", suit='" + suit + '\'' +
                '}';
    }
}
public class CardDemo {
    public static final String[] SUITS = {"♠", "♥", "♣", "♦"};
//买一副牌
    public static List<Card>buyDeck(){
        List<Card> deck = new ArrayList<>(52);
        for (int i = 0; i <4 ; i++) {
            for (int j = 0; j <=13; j++) {
                String suit = SUITS[i];
                int rank = j;
                Card card = new Card(rank, suit);
                card.rank = rank;
                card.suit = suit;
                deck.add(card);
            }
        }
        return deck;
    }
private static void swap(List<Card> deck,int i,int j){
        Card t =deck.get(i);
        deck.set(i,deck.get(j));
        deck.set(j,t);
}
        private static void shuffle(List <Card> deck){
        Random random=new Random();
            for (int i = deck.size()-1; i >0 ; i--) {
                int r=random.nextInt(i);
                swap(deck,i,r);
            }
        }

    public static void main(String[] args) {
        List<Card>deck=buyDeck();
        System.out.println("刚买回来的牌：");
        System.out.println(deck);
        shuffle(deck);
        System.out.println("洗过的牌;");
        System.out.println(deck);
        //三个人，每个人轮流抓五次牌
        List<List<Card>>hands=new ArrayList<>();
        hands.add(new ArrayList<>());
        hands.add(new ArrayList<>());
        hands.add(new ArrayList<>());
        for (int i = 0; i <5 ; i++) {
            for (int j = 0; j <3 ; j++) {
                hands.get(j).add(deck.remove(0));
            }
        }
        System.out.println("剩余的牌");
        System.out.println(deck);
        System.out.println("A手中的牌");
        System.out.println(hands.get(0));
        System.out.println("B手中的牌");
        System.out.println(hands.get(1));
        System.out.println("C手中的牌");
        System.out.println(hands.get(2));
    }

}
//执行结果：
刚买回来的牌：
[Card{rank=0, suit='♠'}, Card{rank=1, suit='♠'}, Card{rank=2, suit='♠'}, Card{rank=3, suit='♠'}, Card{rank=4, suit='♠'}, Card{rank=5, suit='♠'}, Card{rank=6, suit='♠'}, Card{rank=7, suit='♠'}, Card{rank=8, suit='♠'}, Card{rank=9, suit='♠'}, Card{rank=10, suit='♠'}, Card{rank=11, suit='♠'}, Card{rank=12, suit='♠'}, Card{rank=13, suit='♠'}, Card{rank=0, suit='♥'}, Card{rank=1, suit='♥'}, Card{rank=2, suit='♥'}, Card{rank=3, suit='♥'}, Card{rank=4, suit='♥'}, Card{rank=5, suit='♥'}, Card{rank=6, suit='♥'}, Card{rank=7, suit='♥'}, Card{rank=8, suit='♥'}, Card{rank=9, suit='♥'}, Card{rank=10, suit='♥'}, Card{rank=11, suit='♥'}, Card{rank=12, suit='♥'}, Card{rank=13, suit='♥'}, Card{rank=0, suit='♣'}, Card{rank=1, suit='♣'}, Card{rank=2, suit='♣'}, Card{rank=3, suit='♣'}, Card{rank=4, suit='♣'}, Card{rank=5, suit='♣'}, Card{rank=6, suit='♣'}, Card{rank=7, suit='♣'}, Card{rank=8, suit='♣'}, Card{rank=9, suit='♣'}, Card{rank=10, suit='♣'}, Card{rank=11, suit='♣'}, Card{rank=12, suit='♣'}, Card{rank=13, suit='♣'}, Card{rank=0, suit='♦'}, Card{rank=1, suit='♦'}, Card{rank=2, suit='♦'}, Card{rank=3, suit='♦'}, Card{rank=4, suit='♦'}, Card{rank=5, suit='♦'}, Card{rank=6, suit='♦'}, Card{rank=7, suit='♦'}, Card{rank=8, suit='♦'}, Card{rank=9, suit='♦'}, Card{rank=10, suit='♦'}, Card{rank=11, suit='♦'}, Card{rank=12, suit='♦'}, Card{rank=13, suit='♦'}]
洗过的牌;
[Card{rank=5, suit='♣'}, Card{rank=11, suit='♠'}, Card{rank=3, suit='♥'}, Card{rank=0, suit='♥'}, Card{rank=12, suit='♠'}, Card{rank=0, suit='♦'}, Card{rank=9, suit='♠'}, Card{rank=0, suit='♠'}, Card{rank=7, suit='♦'}, Card{rank=1, suit='♠'}, Card{rank=13, suit='♣'}, Card{rank=9, suit='♦'}, Card{rank=12, suit='♣'}, Card{rank=4, suit='♠'}, Card{rank=10, suit='♥'}, Card{rank=10, suit='♠'}, Card{rank=3, suit='♠'}, Card{rank=2, suit='♣'}, Card{rank=6, suit='♦'}, Card{rank=3, suit='♦'}, Card{rank=12, suit='♥'}, Card{rank=5, suit='♠'}, Card{rank=9, suit='♥'}, Card{rank=13, suit='♥'}, Card{rank=10, suit='♣'}, Card{rank=4, suit='♥'}, Card{rank=5, suit='♥'}, Card{rank=2, suit='♦'}, Card{rank=3, suit='♣'}, Card{rank=6, suit='♣'}, Card{rank=4, suit='♣'}, Card{rank=7, suit='♠'}, Card{rank=9, suit='♣'}, Card{rank=11, suit='♥'}, Card{rank=8, suit='♣'}, Card{rank=12, suit='♦'}, Card{rank=6, suit='♠'}, Card{rank=7, suit='♣'}, Card{rank=10, suit='♦'}, Card{rank=6, suit='♥'}, Card{rank=8, suit='♥'}, Card{rank=2, suit='♥'}, Card{rank=1, suit='♦'}, Card{rank=5, suit='♦'}, Card{rank=8, suit='♠'}, Card{rank=1, suit='♣'}, Card{rank=13, suit='♠'}, Card{rank=4, suit='♦'}, Card{rank=13, suit='♦'}, Card{rank=11, suit='♦'}, Card{rank=2, suit='♠'}, Card{rank=7, suit='♥'}, Card{rank=11, suit='♣'}, Card{rank=8, suit='♦'}, Card{rank=0, suit='♣'}, Card{rank=1, suit='♥'}]
剩余的牌
[Card{rank=10, suit='♠'}, Card{rank=3, suit='♠'}, Card{rank=2, suit='♣'}, Card{rank=6, suit='♦'}, Card{rank=3, suit='♦'}, Card{rank=12, suit='♥'}, Card{rank=5, suit='♠'}, Card{rank=9, suit='♥'}, Card{rank=13, suit='♥'}, Card{rank=10, suit='♣'}, Card{rank=4, suit='♥'}, Card{rank=5, suit='♥'}, Card{rank=2, suit='♦'}, Card{rank=3, suit='♣'}, Card{rank=6, suit='♣'}, Card{rank=4, suit='♣'}, Card{rank=7, suit='♠'}, Card{rank=9, suit='♣'}, Card{rank=11, suit='♥'}, Card{rank=8, suit='♣'}, Card{rank=12, suit='♦'}, Card{rank=6, suit='♠'}, Card{rank=7, suit='♣'}, Card{rank=10, suit='♦'}, Card{rank=6, suit='♥'}, Card{rank=8, suit='♥'}, Card{rank=2, suit='♥'}, Card{rank=1, suit='♦'}, Card{rank=5, suit='♦'}, Card{rank=8, suit='♠'}, Card{rank=1, suit='♣'}, Card{rank=13, suit='♠'}, Card{rank=4, suit='♦'}, Card{rank=13, suit='♦'}, Card{rank=11, suit='♦'}, Card{rank=2, suit='♠'}, Card{rank=7, suit='♥'}, Card{rank=11, suit='♣'}, Card{rank=8, suit='♦'}, Card{rank=0, suit='♣'}, Card{rank=1, suit='♥'}]
A手中的牌
[Card{rank=5, suit='♣'}, Card{rank=0, suit='♥'}, Card{rank=9, suit='♠'}, Card{rank=1, suit='♠'}, Card{rank=12, suit='♣'}]
B手中的牌
[Card{rank=11, suit='♠'}, Card{rank=12, suit='♠'}, Card{rank=0, suit='♠'}, Card{rank=13, suit='♣'}, Card{rank=4, suit='♠'}]
C手中的牌
[Card{rank=3, suit='♥'}, Card{rank=0, suit='♦'}, Card{rank=7, suit='♦'}, Card{rank=9, suit='♦'}, Card{rank=10, suit='♥'}]
