方法的使用
1、什么是方法
方法就是一个代码片段，类似于C语言中的函数
方法存在的意义
是能够模块化的组织代码(当代码规模比较复杂的时候)
做到代码被重复使用, 一份代码可以在多个位置使用.
让代码更好理解更简单
直接调用现有方法开发, 不必重复造轮子
2、方法定义语句
基本语法

//方法定义
public static   方法返回值   方法名称（[参数类型   形参  .....]）{
		方法体代码；
		[return  返回值];
		}
	//方法调用
	返回值变量 = 方法名称（实参....);
1
2
3
4
5
6
7
代码示例：实现一个方法实现两个整数的相加

class Test {
    public static void main(String[] args) {
            int a = 10;
            int b = 20; 
          // 方法的调用
            int ret = add(a, b);
            System.out.println("ret = " + ret); 
       }
    // 方法的定义
   public static int add(int x, int y) { 
         return x + y;  
      }
}
                 
// 执行结果 ret = 30 
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
注意事项
public 和 static 两个关键字在此处具有特定含义, 我们暂时不讨论, 后面会详细介绍.
方法定义时, 参数可以没有. 每个参数要指定类型
方法定义时, 返回值也可以没有, 如果没有返回值, 则返回值类型应写成 void
方法定义时的参数称为 “形参”, 方法调用时的参数称为 “实参”
方法的定义必须在类之中, 代码书写在调用位置的上方或者下方均可
Java 中没有 “函数声明” 这样的概念.
3、方法调用执行过程
基本规则
定义方法的时候, 不会执行方法的代码. 只有调用的时候才会执行.
当方法被调用的时候, 会将实参赋值给形参.
参数传递完毕后, 就会执行到方法体代码.
当方法执行完毕之后(遇到 return 语句), 就执行完毕, 回到方法调用位置继续往下执行
一个方法可以被调用多次
代码示例：

 class Test {
     public static void main(String[] args) {
             int a = 10; 
             int b = 20;
             System.out.println("第一次调用方法之前");
             int ret = add(a, b); 
             System.out.println("第一次调用方法之后"); 
             System.out.println("ret = " + ret);
             System.out.println("第二次调用方法之前"); 
              ret = add(30, 50);
              System.out.println("第二次调用方法之后"); 
              System.out.println("ret = " + ret); 
        }
                                
public static int add(int x, int y) { 
         System.out.println("调用方法中 x = " + x + " y = " + y);
                   return x + y;
        } 
 }
// 执行结果
 一次调用方法之前 
 调用方法中 x = 10 y = 20
 第一次调用方法之后 
 ret = 30 
 第二次调用方法之前
 调用方法中 x = 30 y = 50
 第二次调用方法之后
 ret = 80
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
代码示例2：计算 1! + 2! + 3! + 4! + 5!

class Test{
    public static void main(String[] args) {
        int sum=0;
        for(int i=0;i<=5;i++){
            sum+=JC(i);
        }
    System.out.println("sum="+sum);
    }
    public static int JC(int n){
        System.out.println("计算n的阶乘中 n="+n)；
        int result=1;
        for(int i=1;i<=n;i++){
            result*=i;
        }
        return result;
    }
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
// 执行结果 
计算 n 的阶乘中! n = 1
计算 n 的阶乘中! n = 2
计算 n 的阶乘中! n = 3
计算 n 的阶乘中! n = 4
计算 n 的阶乘中! n = 5 
sum = 153
1
2
3
4
5
6
7
使用方法：避免使用二重循环，让代码更简单清晰，时间复杂度为0（2N）
4、实参和形参的关系
代码示例：交换两个整型变量

class Test {
    public static void main(String[] args) {
            int a = 10; 
            int b = 20;
            swap(a, b); 
            System.out.println("a = " + a + " b = " + b);    }
    public static void swap(int x, int y) {
            int tmp = x;
                 x = y; 
                y = tmp;
        }
 }
1
2
3
4
5
6
7
8
9
10
11
12
// 运行结果 a = 10 b = 20
原因分析
这个代码并没有完成数据的交换
对于基础类型来说，形参 相当于实参的拷贝，即传值调用

int a = 10;
int b = 20;
int x = a;
int y = b;
int tmp = x; 
x = y; 
y = tmp;
1
2
3
4
5
6
7
可以看到，对x和y的修改，不影响a和b的值
解决办法：传引用类型参数

public class Test{
   public static void main(String[] args){
   int a=10;
   int b=20;
    a=a^b;
    b=a^b;
    a=a^b;
   System.out.println(a);
   System.out.println(b);
   }
}
1
2
3
4
5
6
7
8
9
10
11
5、没有返回值的方法
方法的返回值是可选的，有时候有有时候没有
代码示例：

class Test {
	public static void main(String[] args) {
	int a = 10;
	int b = 20;
	print(a, b);
	} 
 public static void print(int x, int y) { 
 System.out.println("x = " + x + " y = " + y);
	 }
 } 
1
2
3
4
5
6
7
8
9
10
当参数类型是空的时候，就不用有返回值，
当参数类型为 int 、long、boolean等基本类类型时，要有返回值，而且类型必须与参数类型一致。
