数组作为方法的返回值
代码示例：写一个方法，将数组中的每个元素都×2
方法一：直接修改数组

public class Test {
    public static void main(String [] args){
        int [] arr={1,2,3};
        transfrom(arr);
        printArray(arr);
    }
    public static void printArray(int [] arr){
        for(int i=0;i<arr.length;i++){
            System.out.println(arr[i]);
        }
    }
    public static void transfrom(int [] arr){
        for(int i=0;i<arr.length;i++){
            arr[i]=arr[i]*2;
        }
    }
}
//执行结果：
2
4
6
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
//这个代码虽然可行，但是改变了原来的数组
//有事我们不希望破坏原来的数组，就需要在方法内部创建一个新的数组
//并由方法返回出来

代码2：返回一个新的数组

public class Test {
    public static void main(String [] args){
        int [] arr={1,2,3};
        int [] output=transfrom(arr);
        System.out.println("原来数组");
        printArray(arr);
        System.out.println("*2之后的数组");
        printArray(output);
    }
    public static void printArray(int [] arr){
        for(int i=0;i<arr.length;i++){
            System.out.println(arr[i]);
        }
    }
    public static int[] transfrom(int [] arr){
        int [] ret=new int[arr.length];
        for(int i=0;i<arr.length;i++){
            ret[i]=arr[i]*2;
        }
        return ret;
    }
}
//执行结果：
原来的数组
1
2
3
*2之后的数组
2
4
6
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
这样的话就不会破坏原有的数组了
另外由于数组是引用类型，返回的时候只是将这个数组的首地址返回给函数调用者，没有拷贝数组内容，从而比较高效。
