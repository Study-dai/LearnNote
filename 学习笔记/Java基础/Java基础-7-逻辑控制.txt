java中的逻辑控制语句
java中的逻辑控制和输出方式
1、顺序结构
顺序结构比较简单. 像我们之前写过的代码就是顺序结构的, 按照代码书写的顺序一行一行执行
2、分支结构
（1）if语句
语法形式：

if(布尔表达式){
//条件满足的时候执行代码
}
1
2
3
（2）if else 语句
语法形式：

if（布尔表达式）{
//条件满足时执行
}else{
//条件不满足时执行
}
1
2
3
4
5
（3）多分支情况

if（布尔表达式1）{
//条件1满足时执行
}else if（布尔表达式2）{
//条件2满足时执行
}else{
//条件都不满足时执行
}
1
2
3
4
5
6
7
实例：判定某一年是否是闰年

int  year =2000;
if(year%100==0){
//判定世纪闰年
if（year%400==0){
 System.out.println("是闰年"); 
 } else {
 System.out.println("不是闰年"); 
 }
 } else { // 普通闰年
 if (year % 4 == 0) { 
 System.out.println("是闰年"); 
 }else{
   System.out.println("不是闰年");
   }
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
注意事项：
if/else预计中可以不加大括号，但是也可以写语句，（只能写一条），此时else和上面最近的if匹配，但是实际开发中不建议这么搞。最好加上大括号。
switch语句
基本语法

switch(整数|枚举|字符|字符串){ 
case 内容1 : { 
内容满足时执行语句; 
[break;] 
} 
 case 内容2 : { 
 内容满足时执行语句;
 [break;]
 } 
  ...  default:{
  内容都不满足时执行语句;
  [break;]
  } 
  } 
1
2
3
4
5
6
7
8
9
10
11
12
13
14
根据 switch 中值的不同, 会执行对应的 case 语句.
遇到 break 就会结束该 case 语句. 如果 switch 中的值没有匹配的 case, 就会执行 default 中的语句.
我们建议一个 switch 语句最好都要带上 default.
注意：
1.break不要漏了，否则会失去多分支的效果
2.switch中的值只能是 整数、枚举、字符、字符串
3、switch不能表示复杂的条件

// 例如: 如果 num 的值在 10 到 20 之间, 就打印 hehe 
// 这样的代码使用 if 很容易表达, 但是使用 switch 就无法表示. 
if (num > 10 && num < 20) {  
System.out.println("hehe");
}
1
2
3
4
5
4、switch虽然支持嵌套、但是很丑、代码不美观，读起来也不方便
3、循环结构
（1）while循环
基本语法格式：
while（循环条件）{
循环语句；
}
循环条件为true，则执行循环语句。否则结束循环
代码示例：打印1到10 的数字

int num =1；
while（num<=10){
System.out.println(num);
num++;
}
1
2
3
4
5
注意事项

和 if 类似, while 下面的语句可以不写 { } , 但是不写的时候只能支持一条语句. 建议还是加上 { }
和 if 类似, while 后面的 { 建议和 while 写在同一行.
和 if 类似, while 后面不要多写 分号, 否则可能导致循环不能正确执行.
break
break的功能是让循环提前结束
代码示例：

int num = 100;
 while (num <= 200) { 
     if (num % 3 == 0) {
              System.out.println("找到了 3 的倍数, 为:" + num);
              break; 
              }
              num++;
     } 
1
2
3
4
5
6
7
8
// 执行结果 
找到了 3 的倍数, 为:102
1
2
continue
continue的功能是跳出当前循环，立即进入下一层循环
（2）for循环
for（表达式1；表达式2；表达式3）{
循环体；
}
表达式1: 用于初始化循环变量.
表达式2: 循环条件
表达式3: 更新循环变量.
相比于while循环，for循环将三个部分合并到一个括号里，写代码的时候布偶容易遗漏
代码示例1: 打印 1 - 10 的数字

for (int i = 1; i <= 10; i++) {
 System.out.println(i); 
}
1
2
3
注意事项 (和while循环类似)
和 if 类似, for 下面的语句可以不写 { } , 但是不写的时候只能支持一条语句. 建议还是加上 { }
和 if 类似, for 后面的 { 建议和 while 写在同一行.
和 if 类似, for 后面不要多写 分号, 否则可能导致循环不能正确执行

（3）do while 循环
基本语法：
do{
循环语句；
}while（循环条件）；
先执行循环语句，在判定循环条件；
代码实例：打印1-10

 int num = 1; 
 do {
 System.out.println(num);
 num++;
 } while (num <= 10) ；
1
2
3
4
5
注意
do while 循环最后的分号不要忘记
一般 do while 很少用到, 更推荐使用 for 和 while
————————————————
版权声明：本文为CSDN博主「SUST.dai」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/qq_45477141/article/details/102653698