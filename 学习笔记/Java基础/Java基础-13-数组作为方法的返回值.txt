数组作为方法的参数
1、基本用法
代码示例：打印数组内容

public static void main(String  [ ] args){
	int [ ] arr={1,2,3};
	printArry(arr);
	}
	public static void printArray(int [ ] a){
	for(int x:arr){
	System.out.println(x);
	}
}
//执行结果
1
2
3
1
2
3
4
5
6
7
8
9
10
11
12
13
在这个代码中
int [ ] a是函数的形参，int [ ] arr是函数实参。
如果需要获取到数组长度，同样可以说使用arr.length
2、理解引用类型
代码示例1：参数传内置类型

public static void main(String[] args) {
	int num = 0;
	func(num);
	System.out.println("num = " + num);
	}
public static void func(int x) {
	x = 10;
	System.out.println("x = " + x);
	}
// 执行结果 
x = 10
num = 0 
1
2
3
4
5
6
7
8
9
10
11
12
我们发现，修改形参x的值，不影响实参num的值。

代码示例2：参数传数组类型

public static void main(String[] args) {
	int[] arr = {1, 2, 3};
	func(arr);
	System.out.println("arr[0] = " + arr[0]);
} 
public static void func(int[] a) {    
 a[0] = 10;     
 System.out.println("a[0] = " + a[0]);
 } 
 
// 执行结果 
a[0] = 10
arr[0] = 10 
1
2
3
4
5
6
7
8
9
10
11
12
13
我们发现, 在函数内部修改数组内容, 函数外部也发生改变.
此时数组名 arr 是一个 “引用” . 当传参的时候, 是按照引用传参.

这就要从内存开始说起了
如何理解内存
内存就是指我们熟悉的 “内存”.
内存可以直观的理解成一个宿舍楼. 有一个长长的大走廊, 上面有很多房间.
每个房间的大小是 1 Byte (如果计算机有 8G 内存, 则相当于有 80亿 个这样的房间).
每个房间上面又有一个门牌号, 这个门牌号就称为 地址
什么是引用
引用相当于一个 “别名”, 也可以理解成一个指针.

创建一个引用只是相当于创建了一个很小的变量, 这个变量保存了一个整数, 这个整数表示内存中的一个地址
针对 int [ ] arr=new int [ ] {1,2,3}这样的代码，内存布局如图：
a、当我们创建 new int [ ]{1,2,3}的时候，相当于创建了一块内存空间保存三个int

b、接下来执行 int [ ] arr=new int [ ] {1,2,3} 相当于又创建了一个int [ ] 变量，这个变量是一个引用类型，里面只保存了一个整数（数组的起始内存地址）

c、接下来我们进行传参相当于 int [ ] a = arr,内存分布如图

d、接下来我们修改a[0]，此时是根据0x100这样的地址找到对应的内存位置，将其中的值改成100；

此时已经将0x100地址的数据改成了100，那么根据实参arr来获取数组内容arr[0],本质上也是获取0x100地址上的数据，也是100.
**总结：**所谓的"引用"本质上只是存了一个地址，java将数组设定成引用类型，这样的话后续进行数组参数传参，起始只是将数组的地址传入到函数形参中，这样可以避免对整个数组的拷贝（数组可能比较长，呢么拷贝开销就会很大）

