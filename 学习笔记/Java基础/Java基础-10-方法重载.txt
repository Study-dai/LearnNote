方法的重载
什么是方法的重载：
同一个方法名字，提供不同版本的实现，称为方法的重载。
java中的方法（复习）
计算5的阶乘

public class hello{
    public static void main(String[] args) {
       int sum=0;
       for(int i=1;i<=5;i++){
           //方法的调用，涉及的参数称为实参
           sum+=fac(i);
       }
        System.out.println(sum);
    }
    //方法的定义，定义中涉及的参数称为形参
    //java的方法必须写到类里面，java也没有方法声明这样的说法
    public static int fac(int num) {
        int ret=1;
        for(int i=1;i<=num;i++){
            //计算num 的阶乘
            ret*=i;
        }
        return ret;
    }
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
简单的加法的方法使用

public class hello{
    public static void main(String[] args) {
        int a=20;
        int b=10;
        System.out.println("第一次调用方法之前：");
        int ret=add(a,b);
       //执行到add处调用函数add
        System.out.println("第一次调用方法之后：");
        System.out.println(ret);
        System.out.println("第二次调用方法之前：");
        ret =add(30,40);
        System.out.println("第二次调用方法之后：");
        System.out.println(ret);
    }
    public static int add(int x,int y){
        System.out.println("调用方法中x="+x+"y="+y);
        int ret=0;
        ret=x+y;
        return ret;
    }
}
运行结果
第一次调用方法之前：
调用方法中x=20y=10
第一次调用方法之后：
30
第二次调用方法之前：
调用方法中x=30y=40
第二次调用方法之后：
70

进程已结束,退出代码0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
交换两个整型变量的内容
通过数组来实现（跟C语言不同）
因为在java中没有指针，只有与指针类似的引用类型，相当于低配指针
java中的基本类型（int double float byte short long bolean char）都不是引用类型
但是java中数组是引用类型，可以借助数组来完成。
此时方法内部对数组的操作能够影响到方法外部，
当然也可以借用java中其他的引用类型来解决。

public class hello{
    public static void main(String[] args) {
        int [] arr={10,20};
        jiaohuan(arr);
        System.out.println("arr[0]="+arr[0]+"arr[1]="+arr[1]);
    }
    public static void jiaohuan(int arr[]){
        int tmp=arr[0];
        arr[0]=arr[1];
        arr[1]=tmp;
    }
}
1
2
3
4
5
6
7
8
9
10
11
12
方法的重载（overload）
重载主要有两种体现形式
1、方法的名字相同，参数类型不相同。

public class hello{
    public static void main(String[] args) {
      int a=10;
      int b=20;
        System.out.println(add(a,b));
//上面一条执行的是int类型的add方法
        double c=10.8;
        double d=20.0;
        System.out.println(add(c,d));
//上面一条执行的是double类型的add方法
    }
    public static double add(double x,double y){
        return x+y;
    }
    public static int add(int x,int y){
        return x+y;
    }
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
两个方法名字相同，类型不相同，但是可以执行，这就叫方法的重载。

2、方法的名字相同，参数的个数不同。

public class hello{
    public static void main(String[] args) {
      int a=10;
      int b=20;
      int c=30;
        System.out.println(add(a,b));
        System.out.println(add(a,b,c));
    }
    public static int add(int  x,int y,int z){
        //三个参数版本
        return x+y+z;
    }
    public static int add(int x,int y){
        //两个参数版本
        return x+y;
    }
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
方法重载前提条件：这两个条件必须在同一个 类 的前提下。
两个方法是否构成重载和方法返回值类型无关。

eg:在定义一个add方法
public static double add(int x,int y){
        return x+y;
    }
//编译就会出现重复定义的错误
1
2
3
4
5
要想重载必须保证参数个数一样或者参数类型相同。
（C++ java 都支持重载）
有些方法，参数不同，但是方法体内部的执行逻辑完全一样，这时候就可以使用重载来处理，但是没必要，还可以使用“泛型”来处理。泛型以后会提到。
